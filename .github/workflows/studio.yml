name: studio-nuxt-build
run-name: studio nuxt build

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Add write workflow permissions
permissions:
  contents: write

# Allow one concurrent deployment
concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  # Build job
  build-and-deploy:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: apps/hub

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [18]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Identify package manager
        id: pkgman
        run: |
          cache=`[ -f "apps/hub/pnpm-lock.yaml" ] && echo "pnpm" || ([ -f "apps/hub/package-lock.json" ] && echo "npm" || ([ -f "apps/hub/yarn.lock" ] && echo "yarn" || echo ""))`
          package_manager=`[ ! -z "$cache" ] && echo "$cache" || echo "pnpm"`
          echo "cache=$cache" >> $GITHUB_OUTPUT
          echo "package_manager=$package_manager" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ steps.pkgman.outputs.cache }}

      - uses: pnpm/action-setup@v3
        if: ${{ steps.pkgman.outputs.package_manager == 'pnpm' }}
        name: Install pnpm
        id: pnpm-install
        with:
          version: 10.12.3

      - name: Install dependencies
        run: ${{ steps.pkgman.outputs.package_manager }} install

      - name: Install @nuxthq/studio with compatibility
        run: |
          # Try to install latest compatible version
          ${{ steps.pkgman.outputs.package_manager }} add -D @nuxthq/studio@latest || \
          ${{ steps.pkgman.outputs.package_manager }} add -D @nuxthq/studio@2.1.0

      - name: Create .nuxtrc with studio config
        run: |
          echo 'autoImport=true' >> .nuxtrc
          echo 'modules[]="@nuxthq/studio"' >> .nuxtrc
          echo 'studio={}' >> .nuxtrc

      - name: Build for Cloudflare
        run: |
          # Try building with studio first
          if ! npx nuxi build; then
            echo "Studio build failed, trying fallback without studio..."
            # Remove .nuxtrc and try building without studio
            rm -f .nuxtrc
            npx nuxi build
          fi
        env:
          NUXT_PUBLIC_STUDIO_API_URL: https://api.nuxt.studio
          NUXT_PUBLIC_STUDIO_TOKENS: eec209c726d7129192351fad2dc9db434d5a1dd6b1e168f3ae5fef11d0dc7ab7
          NUXT_STUDIO_ENABLED: true

        # Deployment job
      - name: Deploy to Cloudflare Pages ðŸš€
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: your-project-name # Replace with your actual Cloudflare project name
          directory: apps/hub/.output/public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
